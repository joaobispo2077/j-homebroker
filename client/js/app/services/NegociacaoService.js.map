{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return this._http.get('negociacoes/semana').then(negociacoes => {\r\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n        }).catch((erro) => {\r\n            console.log(erro);\r\n\r\n            throw new Error('Não Foi possível obter as negociações da semana');\r\n        });\r\n\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return this._http.get('negociacoes/anterior').then(negociacoes => {\r\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n        }).catch((erro) => {\r\n            console.log(erro);\r\n\r\n            throw new Error('Não Foi possível obter as negociações da semana anterior');\r\n        });\r\n\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return this._http.get('negociacoes/retrasada').then(negociacoes => {\r\n            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n        }).catch((erro) => {\r\n            console.log(erro);\r\n\r\n            throw new Error('Não Foi possível obter as negociações da semana retrasada');\r\n        });\r\n\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações');\r\n\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações Apagas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações');\r\n\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual\r\n                    .some(negociacaoExistente => JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))\r\n                )\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar negociações para importar');\r\n\r\n            });\r\n    }\r\n\r\n\r\n}"]}