{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","parse","responseText","send"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAAaA,W;;;;;;;sEAEKC,G,EAAK;AACf,oDAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,uDAAOH,GAAP;AACH;;;4DAEGI,G,EAAK;AAAA;;AAEL,uDAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,+DAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,iDADH,EAEFM,IAFE,CAEG;AAAA,+DAAON,IAAIQ,IAAJ,EAAP;AAAA,iDAFH,CAAP;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AAEH;;;6DACIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,uDAAOJ,MAAMD,GAAN,EAAW;AACVM,iEAAS,EAAE,gBAAgB,kBAAlB,EADC;AAEVC,gEAAQ,MAFE;AAGVC,8DAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHI,iDAAX,EAKFH,IALE,CAKG;AAAA,+DAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,iDALH,CAAP;;AAQA,uDAAO,IAAIe,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,4DAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,4DAAIE,IAAJ,CAAS,MAAT,EAAiBhB,GAAjB,EAAsB,IAAtB;AACAc,4DAAIG,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAH,4DAAII,kBAAJ,GAAyB,YAAM;;AAE3B,oEAAIJ,IAAIK,UAAJ,IAAkB,CAAtB,EAAyB;;AAErB,4EAAIL,IAAIM,MAAJ,IAAc,GAAlB,EAAuB;;AAEnBR,wFAAQH,KAAKY,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,yEAHD,MAGO;;AAEHT,uFAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,yDAZD;AAaAR,4DAAIS,IAAJ,CAASd,KAAKC,SAAL,CAAeL,IAAf,CAAT,EAlBoC,CAkBJ;AACnC,iDAnBM,CAAP;AAsBH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    _handleErrors(res) {\r\n        if (!res.ok) throw new Error(res.statusText);\r\n        return res;\r\n    }\r\n\r\n    get(url) {\r\n\r\n        return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json());\r\n\r\n        // return new Promise((resolve, reject) => {\r\n\r\n        //     let xhr = new XMLHttpRequest();\r\n\r\n        //     xhr.open('GET', url);\r\n\r\n        //     xhr.onreadystatechange = () => {\r\n\r\n        //         if (xhr.readyState == 4) {\r\n        //             if (xhr.status == 200) {\r\n\r\n        //                 console.log('obtendo as negociacoes do servidor');\r\n        //                 //xhr.responseText trás um JSON, que, é um arquvio TEXTO escrito em sintaxe de um objeto Javascript\r\n        //                 //A função JSON.parse() transforma um arquivo JSON em um objeto Javascript\r\n        //                 resolve(JSON.parse(xhr.responseText));\r\n\r\n\r\n        //             } else {\r\n\r\n        //                 reject(xhr.responseText);\r\n        //             }\r\n        //         }\r\n        //     };\r\n\r\n        //     xhr.send();\r\n\r\n        // });\r\n\r\n    }\r\n    post(url, dado) {\r\n\r\n        return fetch(url, {\r\n                headers: { 'Content-type': 'application/json' },\r\n                method: 'post',\r\n                body: JSON.stringify(dado)\r\n            })\r\n            .then(res => this._handleErrors(res));\r\n\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        });\r\n\r\n\r\n    }\r\n}"]}